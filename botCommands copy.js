const bot = require("./app");
const { addBusinessDays, format } = require("date-fns");
const { uk } = require("date-fns/locale"); // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
const axios = require("axios");
const {
  SERVICE_TG_ID,
  SERVICE_TREED_ID,
  BITRIX24_SERVICE_GROUP_ID,
  BITRIX24_SERVICE_RESPONSIBLE_1_ID,
  BITRIX24_WEBHOOK_URL,
} = process.env;
const {
  contactsMessageText,
  faqMessageTextPlotter,
  faqMessageTextGlass,
  faqMessageTextFilm,
} = require("./constant/messages");

const setBotCommands = () => {
  bot.setMyCommands([
    { command: "/leave_request", description: "–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É" },
    { command: "/contacts", description: "–ö–æ–Ω—Ç–∞–∫—Ç–∏" },
    { command: "/faq", description: "–ü–∏—Ç–∞–Ω–Ω—è, —â–æ —á–∞—Å—Ç–æ –∑–∞–¥–∞—é—Ç—å—Å—è" },
  ]);

  bot.on("message", async msg => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text === "/leave_request") {
      // return bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:", {
      //   reply_markup: {
      //     inline_keyboard: [
      //       [
      //         {
      //           text: "–ó–∞–ø–∏—Ç –Ω–∞ –≥—É—Ä—Ç–æ–≤—É —Å–ø—ñ–≤–ø—Ä–∞—Ü—é",
      //           callback_data: "leave_request", // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
      //         },
      //         {
      //           text: "–ó–∞–ø–∏—Ç –∑ –ø—Ä–∏–≤–æ–¥—É —Ä–æ–∑–¥—Ä—ñ–±–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å",
      //           callback_data: "leave_request", // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
      //         },
      //         {
      //           text: "–ó–∞–ø–∏—Ç –¥–æ —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∏",
      //           callback_data: "leave_request", // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
      //         },
      //         {
      //           text: "–•–æ—á—É —Å–ø—ñ–≤–ø—Ä–∞—Ü—é–≤–∞—Ç–∏",
      //           callback_data: "leave_request", // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
      //         },
      //       ],
      //     ],
      //   },
      // });

      return bot.sendMessage(
        chatId,
        "<b>–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è, —è–∫–∏–π –≤–∞–º –ø—ñ–¥—Ö–æ–¥–∏—Ç—å:</b>\n\n" +
          "1. üì¶ –ì—É—Ä—Ç–æ–≤–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—è –¥–ª—è –±—ñ–∑–Ω–µ—Å—É\n" +
          "2. üõçÔ∏è –†–æ–∑–¥—Ä—ñ–±–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ–∫—É–ø—Ü—ñ–≤\n" +
          "3. üõ†Ô∏è –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º\n" +
          "4. ü§ù –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –ø—Ä–æ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é",
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üì¶ –ì—É—Ä—Ç–æ–≤–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data: "wholesale" }],
              [{ text: "üõçÔ∏è –†–æ–∑–¥—Ä—ñ–±–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "retail" }],
              [{ text: "üõ†Ô∏è –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data: "support" }],
              [{ text: "ü§ù –°–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data: "collaboration" }],
            ],
          },
        }
      );
    }

    if (text == "@ArmorStandartBot show group id") {
      console.log(
        `Chat ID: ${msg.chat.id}, Thread ID: ${
          msg.message_thread_id || null
        }, Title: ${msg.chat.title}, Type: ${msg.chat.type}`
      );
      // console.log(`msg.message_thread_id`, msg);

      return bot.sendMessage(
        chatId,
        `group id: ${msg.chat.id}, group title: ${msg.chat.title}, thread id: ${msg.message_thread_id},  type: ${msg.chat.type}`,
        { parse_mode: "Markdown" }
      );
    }

    if (text == "/contacts") {
      const stickerUrl = "./img/inline/girl_map.jpg";
      return bot.sendPhoto(chatId, stickerUrl, {
        caption: contactsMessageText,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞—Ä—Ç—É",
                url: "https://goo.gl/maps/jmE55U1KPn1GXXWW9",
              },
            ],
          ],
        },
      });
    }

    if (text == "/faq") {
      const faqMessageTextPlotterStickerUrl = "./img/inline/plotter.jpg";
      await bot.sendPhoto(chatId, faqMessageTextPlotterStickerUrl, {
        caption: faqMessageTextPlotter,
        parse_mode: "HTML",
      });
      // await bot.sendMessage(chatId, faqMessageTextGlass, {
      //   parse_mode: "HTML",
      // });
      const faqMessageTextGlassStickerUrl = "./img/inline/glass.jpg";
      await bot.sendPhoto(chatId, faqMessageTextGlassStickerUrl, {
        caption: faqMessageTextGlass,
        parse_mode: "HTML",
      });
      const faqMessageTextFilmStickerUrl = "./img/inline/film.jpg";
      await bot.sendPhoto(chatId, faqMessageTextFilmStickerUrl, {
        caption: faqMessageTextFilm,
        parse_mode: "HTML",
      });
    }
  });

  bot.on("callback_query", async query => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data === "wholesale") {
      await bot.sendMessage(
        chatId,
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –≤–∫–∞–∂—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ. –ú–∏ –≤–∞—Å —É–≤–∞–∂–Ω–æ —Å–ª—É—Ö–∞—î–º–æ!"
      );

      // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
      const messageHandler = async userMsg => {
        if (userMsg.chat.id !== chatId || userMsg.chat.type !== "private") {
          return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
        }

        const {
          message_id,
          from: { id: userId, first_name, last_name, username },
          date,
          text: userText,
        } = userMsg;

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ UNIX –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        const formattedDate = new Date(date * 1000).toLocaleString("uk-UA", {
          timeZone: "Europe/Kiev",
          day: "2-digit",
          month: "2-digit",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit",
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const adminMessage = `
      –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
      - <b>–¢–∏–ø –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:</b> üì¶ –ì—É—Ä—Ç–æ–≤–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—è
      - <b>–Ü–º'—è:</b> ${first_name} ${last_name || ""}
      - <b>–ù—ñ–∫–Ω–µ–π–º:</b> @${username || "–Ω–µ–º–∞—î"}
      - <b>ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b> ${userId}
      - <b>ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b> ${message_id}
      - <b>–î–∞—Ç–∞/–ß–∞—Å:</b> ${formattedDate}

      <b>–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>
      "${userText}"
      `;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.sendMessage(SERVICE_TG_ID, adminMessage, {
          parse_mode: "HTML",
          message_thread_id: SERVICE_TREED_ID,
        });

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.sendMessage(
          chatId,
          "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
        );

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –¥–ª—è Bitrix24
        const currentDate = new Date();
        const deadlineDate = addBusinessDays(currentDate, 1);
        const formattedDeadline = format(
          deadlineDate,
          "yyyy-MM-dd'T'HH:mm:ssXXX",
          { locale: uk }
        );

        const taskData = {
          fields: {
            TITLE:
              `üì¶ ${message_id} - –ó–∞–ø–∏—Ç –∫–ª—ñ—î–Ω—Ç–∞ –Ω–∞ –≥—É—Ä—Ç–æ–≤–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é: ` +
              first_name +
              " " +
              (last_name || ""),
            DESCRIPTION: adminMessage,
            RESPONSIBLE_ID: BITRIX24_SERVICE_RESPONSIBLE_1_ID,
            DEADLINE: formattedDeadline,
            GROUP_ID: BITRIX24_SERVICE_GROUP_ID,
            PRIORITY: 2,
          },
        };

        try {
          const response = await axios.post(BITRIX24_WEBHOOK_URL, taskData);
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ Bitrix24:", error);
        }

        // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.removeListener("message", messageHandler);
      };

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
      bot.on("message", messageHandler);
    }
  });
};

module.exports = {
  setBotCommands,
};
