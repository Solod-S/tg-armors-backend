const bot = require("./app");
const { addBusinessDays, format } = require("date-fns");
const { uk } = require("date-fns/locale"); // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
const axios = require("axios");
const {
  WHOLESALE_TG_ID,
  WHOLESALE_TREED_ID,
  RETAIL_ORDER_TG_ID,
  RETAIL_ORDER_TREED_ID,
  TECH_SUPPORT_TG_ID,
  TECH_SUPPORT_TREED_ID,
  BITRIX24_SERVICE_GROUP_ID,
  BITRIX24_SERVICE_RESPONSIBLE_1_ID,
  BITRIX24_WEBHOOK_URL,
} = process.env;

const {
  contactsMessageText,
  faqMessageTextPlotter,
  faqMessageTextGlass,
  faqMessageTextFilm,
} = require("./constant/messages");

const setBotCommands = () => {
  bot.setMyCommands([
    { command: "/leave_request", description: "–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É" },
    { command: "/contacts", description: "–ö–æ–Ω—Ç–∞–∫—Ç–∏" },
  ]);

  bot.on("message", async msg => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text === "/leave_request") {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
      await bot.sendMessage(
        chatId,
        "<b>–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è, —è–∫–∏–π –≤–∞–º –ø—ñ–¥—Ö–æ–¥–∏—Ç—å:</b>\n\n" +
          "1. üì¶ –ì—É—Ä—Ç–æ–≤–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—è –¥–ª—è –±—ñ–∑–Ω–µ—Å—É\n" +
          "2. üõçÔ∏è –†–æ–∑–¥—Ä—ñ–±–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ–∫—É–ø—Ü—ñ–≤\n" +
          "3. üõ†Ô∏è –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º\n" +
          "4. ü§ù –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –ø—Ä–æ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é",
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üì¶ –ì—É—Ä—Ç–æ–≤–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data: "wholesale" }],
              [{ text: "üõçÔ∏è –†–æ–∑–¥—Ä—ñ–±–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "retail" }],
              [{ text: "üõ†Ô∏è –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data: "support" }],
              [{ text: "ü§ù –°–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data: "collaboration" }],
            ],
          },
        }
      );
    }

    if (text === "/contacts") {
      const stickerUrl = "./img/inline/girl_map.jpg";
      return bot.sendPhoto(chatId, stickerUrl, {
        caption: contactsMessageText,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞—Ä—Ç—É",
                url: "https://goo.gl/maps/jmE55U1KPn1GXXWW9",
              },
            ],
          ],
        },
      });
    }
  });

  bot.on("callback_query", async query => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (
      data === "wholesale" ||
      data === "retail" ||
      data === "support" ||
      data === "collaboration"
    ) {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"
      await bot.sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.", {
        reply_markup: {
          keyboard: [[{ text: "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact: true }]],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });

      // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
      const contactHandler = async userMsg => {
        if (userMsg.chat.id !== chatId || userMsg.chat.type !== "private") {
          return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
        }

        if (userMsg.contact) {
          const { first_name, last_name, phone_number } = userMsg.contact;

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          // await bot.sendMessage(
          //   chatId,
          //   `–í–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ:\n\n<b>–Ü–º'—è:</b> ${first_name} ${
          //     last_name || ""
          //   }\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone_number}`,
          //   { parse_mode: "HTML" }
          // );

          // –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
          await bot.sendMessage(
            chatId,
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä."
          );

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
          const commentHandler = async commentMsg => {
            if (
              commentMsg.chat.id !== chatId ||
              commentMsg.chat.type !== "private"
            ) {
              return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
            }

            const {
              message_id,
              from: { id: userId, first_name, last_name, username },
              date,
              text: commentText,
            } = commentMsg;

            const formattedDate = new Date(date * 1000).toLocaleString(
              "uk-UA",
              {
                timeZone: "Europe/Kiev",
                day: "2-digit",
                month: "2-digit",
                year: "numeric",
                hour: "2-digit",
                minute: "2-digit",
                second: "2-digit",
              }
            );

            const adminMessage = `
      –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
      - <b>–¢–∏–ø –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:</b> ${
        data === "wholesale"
          ? "üì¶ –ì—É—Ä—Ç–æ–≤–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—è"
          : data === "retail"
          ? "üõçÔ∏è –†–æ–∑–¥—Ä—ñ–±–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
          : data === "support"
          ? "üõ†Ô∏è –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞"
          : "ü§ù –°–ø—ñ–≤–ø—Ä–∞—Ü—è"
      }
      - <b>–Ü–º'—è:</b> ${first_name} ${last_name || ""}
      - <b>–ù—ñ–∫–Ω–µ–π–º:</b> @${username || "–Ω–µ–º–∞—î"}
      - <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone_number}
      - <b>ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b> ${userId}
      - <b>ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b> ${message_id}
      - <b>–î–∞—Ç–∞/–ß–∞—Å:</b> ${formattedDate}
        
      <b>–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>
      "${commentText}"
    `;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            await bot.sendMessage("-1002086154595", adminMessage, {
              parse_mode: "HTML",
              message_thread_id: "3",
            });

            await bot.sendMessage(
              chatId,
              "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
            );

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Bitrix24
            const currentDate = new Date();
            const deadlineDate = addBusinessDays(currentDate, 1);
            const formattedDeadline = format(
              deadlineDate,
              "yyyy-MM-dd'T'HH:mm:ssXXX",
              { locale: uk }
            );

            const taskData = {
              fields: {
                TITLE:
                  `${
                    data === "wholesale"
                      ? "üì¶"
                      : data === "retail"
                      ? "üõçÔ∏è"
                      : data === "support"
                      ? "üõ†Ô∏è"
                      : "ü§ù"
                  } ${message_id} - –ó–∞–ø–∏—Ç –∫–ª—ñ—î–Ω—Ç–∞: ` +
                  first_name +
                  " " +
                  (last_name || ""),
                DESCRIPTION: adminMessage,
                RESPONSIBLE_ID: BITRIX24_SERVICE_RESPONSIBLE_1_ID,
                DEADLINE: formattedDeadline,
                GROUP_ID: BITRIX24_SERVICE_GROUP_ID,
                PRIORITY: 2,
              },
            };

            try {
              await axios.post(BITRIX24_WEBHOOK_URL, taskData);
            } catch (error) {
              console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ Bitrix24:", error);
            }

            bot.removeListener("message", commentHandler);
          };

          bot.on("message", commentHandler);

          // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª —Å–Ω–æ–≤–∞
          bot.removeListener("message", contactHandler);
        } else {
          // –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
          await bot.sendMessage(
            chatId,
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º."
          );
        }
      };

      // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
      bot.on("contact", contactHandler);
    }
  });
};

module.exports = { setBotCommands };
