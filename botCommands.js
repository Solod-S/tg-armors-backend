const bot = require("./app");
const { addBusinessDays, format } = require("date-fns");
const { uk } = require("date-fns/locale"); // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
const axios = require("axios");
const {
  WHOLESALE_TG_ID,
  WHOLESALE_TREED_ID,
  RETAIL_ORDER_TG_ID,
  RETAIL_ORDER_TREED_ID,
  TECH_SUPPORT_TG_ID,
  TECH_SUPPORT_TREED_ID,
  COLLABORATION_TG_ID,
  BITRIX24_SERVICE_GROUP_ID,
  BITRIX24_SERVICE_RESPONSIBLE_1_ID,
  BITRIX24_SERVICE_RESPONSIBLE_2_ID,
  BITRIX24_SERVICE_RESPONSIBLE_3_ID,
  BITRIX24_WEBHOOK_URL,
  WHOLESALE_INQUIRY_RESPONSIBLE_ID,
  RETAIL_ORDER_INQUIRY_RESPONSIBLE_ID,
  TECH_SUPPORT_INQUIRY_RESPONSIBLE_ID,
} = process.env;
const {
  contactsMessageText,
  faqMessageTextPlotter,
  faqMessageTextGlass,
  faqMessageTextFilm,
} = require("./constant/messages");

const commands = ["/start", "/contacts"];

const setBotCommands = () => {
  bot.setMyCommands([
    { command: "/start", description: "–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É" },
    { command: "/contacts", description: "–ö–æ–Ω—Ç–∞–∫—Ç–∏" },
  ]);

  bot.on("message", async msg => {
    try {
      const chatId = msg.chat.id;
      const text = msg.text;
      console.log(`chatId`, chatId, msg.chat);
      if (text == "@ArmorStandartBot show group id") {
        console.log(
          `Chat ID: ${msg.chat.id}, Thread ID: ${
            msg.message_thread_id || null
          }, Title: ${msg.chat.title}, Type: ${msg.chat.type}`
        );
        // console.log(`msg.message_thread_id`, msg);

        return bot.sendMessage(
          chatId,
          `group id: ${msg.chat.id}, group title: ${msg.chat.title}, thread id: ${msg.message_thread_id},  type: ${msg.chat.type}`,
          { parse_mode: "Markdown" }
        );
      }

      if (text === "/start") {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        await bot.sendMessage(
          chatId,
          "<b>–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è, —è–∫–∏–π –≤–∞–º –ø—ñ–¥—Ö–æ–¥–∏—Ç—å:</b>\n\n",
          {
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "üì¶ –ì—É—Ä—Ç–æ–≤–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—è",
                    callback_data: "wholesale",
                  },
                ],
                [
                  {
                    text: "üõçÔ∏è –†–æ–∑–¥—Ä—ñ–±–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                    callback_data: "retail",
                  },
                ],
                [{ text: "üõ†Ô∏è –°–µ—Ä–≤—ñ—Å–Ω–∏–π —Ü–µ–Ω—Ç—Ä", callback_data: "support" }],
                [
                  {
                    text: "ü§ù –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –ø—Ä–æ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ",
                    callback_data: "collaboration",
                  },
                ],
              ],
            },
          }
        );
        // await bot.sendMessage(
        //   chatId,
        //   "<b>–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è, —è–∫–∏–π –≤–∞–º –ø—ñ–¥—Ö–æ–¥–∏—Ç—å:</b>\n\n"
        //    +
        //     "1. üì¶ –ì—É—Ä—Ç–æ–≤—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n" +
        //     "2. üõçÔ∏è –†–æ–∑–¥—Ä—ñ–±–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n" +
        //     "3. üõ†Ô∏è –°–µ—Ä–≤—ñ—Å–Ω–∏–π —Ü–µ–Ω—Ç—Ä\n" +
        //     "4. ü§ù –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –ø—Ä–æ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ",
        //   {
        //     parse_mode: "HTML",
        //     reply_markup: {
        //       inline_keyboard: [
        //         [
        //           {
        //             text: "üì¶ –ì—É—Ä—Ç–æ–≤–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—è",
        //             callback_data: "wholesale",
        //           },
        //         ],
        //         [
        //           {
        //             text: "üõçÔ∏è –†–æ–∑–¥—Ä—ñ–±–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        //             callback_data: "retail",
        //           },
        //         ],
        //         [{ text: "üõ†Ô∏è –°–µ—Ä–≤—ñ—Å–Ω–∏–π —Ü–µ–Ω—Ç—Ä", callback_data: "support" }],
        //         [{ text: "ü§ù –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –ø—Ä–æ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ", callback_data: "collaboration" }],
        //       ],
        //     },
        //   }
        // );
      }

      if (text === "/contacts") {
        const stickerUrl = "./img/inline/girl_map.jpg";
        return bot.sendPhoto(chatId, stickerUrl, {
          caption: contactsMessageText,
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              // [
              //   {
              //     text: "–í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞—Ä—Ç—É",
              //     url: "https://goo.gl/maps/jmE55U1KPn1GXXWW9",
              //   },
              // ],
            ],
          },
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error.message);
      await bot.sendMessage(
        msg.chat.id,
        "–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
      );
    }
  });

  bot.on("callback_query", async query => {
    try {
      const chatId = query.message.chat.id;
      const data = query.data;
      const messageId = query.message.message_id;

      // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      await bot.editMessageReplyMarkup(
        {
          inline_keyboard: [[]], // –ü—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        },
        { chat_id: chatId, message_id: messageId }
      );

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
      await bot.sendMessage(
        chatId,
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, —â–æ–± –º–∏ –º–æ–≥–ª–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –≤–∞–º–∏. –ë–µ–∑ —Ü—å–æ–≥–æ –≤–∏ –Ω–µ –∑–º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.",
        {
          reply_markup: {
            keyboard: [
              [{ text: "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact: true }],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        }
      );

      // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
      const contactHandler = async userMsg => {
        if (userMsg.chat.id !== chatId || userMsg.chat.type !== "private") {
          return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
        }

        if (userMsg.contact) {
          const { first_name, last_name, phone_number } = userMsg.contact;

          // bot.removeListener("contact", contactHandler);

          // –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
          await bot.sendMessage(
            chatId,
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä."
          );

          // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
          const commentHandler = async commentMsg => {
            if (
              commentMsg.chat.id !== chatId ||
              commentMsg.chat.type !== "private"
            ) {
              return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
            }

            if (commands.includes(commentMsg.text)) {
              bot.removeListener("message", commentHandler);
              await bot.sendMessage(
                chatId,
                "–ó–∞–ø–∏—Ç –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
              );
              return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            }

            const {
              message_id,
              from: { id: userId, first_name, last_name, username },
              date,
              text: commentText,
            } = commentMsg;

            const formattedDate = new Date(date * 1000).toLocaleString(
              "uk-UA",
              {
                timeZone: "Europe/Kiev",
                day: "2-digit",
                month: "2-digit",
                year: "numeric",
                hour: "2-digit",
                minute: "2-digit",
                second: "2-digit",
              }
            );

            let responsibleTag = ""; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–≥–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            let tgGroupId = "";
            let gtTreedId = "";

            if (data === "wholesale") {
              responsibleTag = `\n\n${WHOLESALE_INQUIRY_RESPONSIBLE_ID}`;
              tgGroupId = WHOLESALE_TG_ID;
              gtTreedId = WHOLESALE_TREED_ID;
            } else if (data === "retail") {
              responsibleTag = `\n\n${RETAIL_ORDER_INQUIRY_RESPONSIBLE_ID}`;
              tgGroupId = RETAIL_ORDER_TG_ID;
              gtTreedId = RETAIL_ORDER_TREED_ID;
            } else if (data === "support") {
              tgGroupId = TECH_SUPPORT_TG_ID;
              gtTreedId = TECH_SUPPORT_TREED_ID;
              responsibleTag = `\n\n${TECH_SUPPORT_INQUIRY_RESPONSIBLE_ID}`;
            } else if (data === "collaboration") {
              tgGroupId = COLLABORATION_TG_ID;
            }

            const adminMessage = `
    –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n
    - <b>–¢–∏–ø –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:</b> ${
      data === "wholesale"
        ? "üì¶ –ì—É—Ä—Ç–æ–≤–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—è"
        : data === "retail"
        ? "üõçÔ∏è –†–æ–∑–¥—Ä—ñ–±–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
        : data === "support"
        ? "üõ†Ô∏è –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞"
        : "ü§ù –°–ø—ñ–≤–ø—Ä–∞—Ü—è"
    }
    - <b>–Ü–º'—è:</b> ${first_name} ${last_name || ""}
    - <b>–ù—ñ–∫–Ω–µ–π–º:</b> @${username || "–Ω–µ–º–∞—î"}
    - <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone_number}
    - <b>ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b> ${userId}
    - <b>ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b> ${message_id}
    - <b>–î–∞—Ç–∞/–ß–∞—Å:</b> ${formattedDate}
    - <b>–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>
    
    "${commentText}" 
   
          `;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            const messageOptions = {
              parse_mode: "HTML",
            };

            if (gtTreedId) {
              messageOptions.message_thread_id = gtTreedId;
            }

            await bot.sendMessage(
              tgGroupId,
              adminMessage + responsibleTag,
              messageOptions
            );

            // COLLABORATION_TG_ID
            // await bot.sendMessage(
            //   "-1002086154595",
            //   adminMessage + responsibleTag,
            //   {
            //     parse_mode: "HTML",
            //     message_thread_id: "3",
            //   }
            // );

            await bot.sendMessage(
              chatId,
              "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
            );

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Bitrix24
            const currentDate = new Date();
            const deadlineDate = addBusinessDays(currentDate, 1);
            const formattedDeadline = format(
              deadlineDate,
              "yyyy-MM-dd'T'HH:mm:ssXXX",
              { locale: uk }
            );
            const bitrix24ResponsibleId =
              data === "wholesale"
                ? BITRIX24_SERVICE_RESPONSIBLE_2_ID
                : data === "collaboration"
                ? BITRIX24_SERVICE_RESPONSIBLE_3_ID
                : BITRIX24_SERVICE_RESPONSIBLE_1_ID;

            const taskData = {
              fields: {
                TITLE:
                  `${
                    data === "wholesale"
                      ? "üì¶ –ì—É—Ä—Ç–æ–≤–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—è"
                      : data === "retail"
                      ? "üõçÔ∏è –†–æ–∑–¥—Ä—ñ–±–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
                      : data === "support"
                      ? "üõ†Ô∏è –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞"
                      : "ü§ù –°–ø—ñ–≤–ø—Ä–∞—Ü—è"
                  } ${message_id} - –ó–∞–ø–∏—Ç –∫–ª—ñ—î–Ω—Ç–∞: ` +
                  first_name +
                  " " +
                  (last_name || ""),
                DESCRIPTION: adminMessage,
                RESPONSIBLE_ID: bitrix24ResponsibleId,
                // RESPONSIBLE_ID: BITRIX24_SERVICE_RESPONSIBLE_1_ID,
                // ACCOMPLICES: [BITRIX24_SERVICE_RESPONSIBLE_2_ID],
                DEADLINE: formattedDeadline,
                GROUP_ID: BITRIX24_SERVICE_GROUP_ID,
                PRIORITY: 2,
              },
            };

            // console.log(`taskData`, taskData);

            try {
              await axios.post(
                BITRIX24_WEBHOOK_URL + "/tasks.task.add",
                taskData
              );

              // –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
              // const taskId = response.data.result.task.id; // ID –∑–∞–¥–∞—á–∏
            } catch (error) {
              console.error(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ Bitrix24:",
                error.message
              );
            }

            // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            bot.removeListener("message", commentHandler);
          };

          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
          bot.on("message", commentHandler);

          // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞
          bot.removeListener("contact", contactHandler);
        } else {
          await bot.sendMessage(
            chatId,
            "–î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º."
          );
        }
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞
      bot.on("contact", contactHandler);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback_query:", error.message);
      await bot.sendMessage(
        query.message.chat.id,
        "–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
      );
    }
  });
};

module.exports = { setBotCommands };
